// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.33.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
    for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl
    CstDecode<
        StreamSink<
            crate::api::screen_shot_api::CaptureResult,
            flutter_rust_bridge::for_generated::DcoCodec,
        >,
    > for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> StreamSink<
        crate::api::screen_shot_api::CaptureResult,
        flutter_rust_bridge::for_generated::DcoCodec,
    > {
        let raw: String = self.cst_decode();
        StreamSink::deserialize(raw)
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::api::screen_shot_api::CaptureResult> for wire_cst_capture_result {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::screen_shot_api::CaptureResult {
        crate::api::screen_shot_api::CaptureResult {
            mode: self.mode.cst_decode(),
            avif_data: self.avif_data.cst_decode(),
            png_data: self.png_data.cst_decode(),
            frame_width: self.frame_width.cst_decode(),
            frame_height: self.frame_height.cst_decode(),
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl NewWithNullPtr for wire_cst_capture_result {
    fn new_with_null_ptr() -> Self {
        Self {
            mode: core::ptr::null_mut(),
            avif_data: core::ptr::null_mut(),
            png_data: core::ptr::null_mut(),
            frame_width: Default::default(),
            frame_height: Default::default(),
        }
    }
}
impl Default for wire_cst_capture_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_shot_hdr_wire_take_full_screen(
    port_: i64,
    stream_sink: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_take_full_screen_impl(port_, stream_sink)
}

#[no_mangle]
pub extern "C" fn frbgen_shot_hdr_wire_init_app(port_: i64) {
    wire_init_app_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_shot_hdr_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_capture_result {
    mode: *mut wire_cst_list_prim_u_8_strict,
    avif_data: *mut wire_cst_list_prim_u_8_strict,
    png_data: *mut wire_cst_list_prim_u_8_strict,
    frame_width: u32,
    frame_height: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
